if not game:IsLoaded() then
    game.Loaded:Wait()
end
local Players = game:GetService("Players")
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local VirtualUser = game:GetService("VirtualUser")
local RunService = game:GetService("RunService")
local HttpService = game:GetService("HttpService")
local Player = Players.LocalPlayer
local Remotes = ReplicatedStorage:WaitForChild("Remotes", 5)
local CommF = Remotes:WaitForChild("CommF_", 5) 
local PlayerGui = Player:WaitForChild("PlayerGui", 5)
local MainGui = PlayerGui:WaitForChild("Main", 5)
local lastNotificationTime = 0
local notificationCooldown = 10
local currentTime = tick()
if currentTime - lastNotificationTime >= notificationCooldown then
    lastNotificationTime = currentTime
end
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local EffectContainer = ReplicatedStorage:FindFirstChild("Effect") and ReplicatedStorage.Effect:FindFirstChild("Container")
if EffectContainer then
    local Death = EffectContainer:FindFirstChild("Death")
    if Death then
        local success, result = pcall(require, Death)
        if success and type(result) == "function" then
            hookfunction(result, function() end)
        end
    end
    local Respawn = EffectContainer:FindFirstChild("Respawn")
    if Respawn then
        local success, result = pcall(require, Respawn)
        if success and type(result) == "function" then
            hookfunction(result, function() end)
        end
    end
end
local GuideModule = ReplicatedStorage:FindFirstChild("GuideModule")
if GuideModule then
    local success, module = pcall(require, GuideModule)
    if success and module and type(module.ChangeDisplayedNPC) == "function" then
        hookfunction(module.ChangeDisplayedNPC, function() end)
    end
end
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Util = ReplicatedStorage:WaitForChild("Util", 5)
if Util then
    local CameraShaker = Util:FindFirstChild("CameraShaker")
    if CameraShaker then
        require(CameraShaker):Stop()
    end
end
local placeId = game.PlaceId
local worldMap = {
    [2753915549] = true,
    [4442272183] = true,
    [7449423635] = true
}
if worldMap[placeId] then
    if placeId == 2753915549 then
        World1 = true
    elseif placeId == 4442272183 then
        World2 = true
    elseif placeId == 7449423635 then
        World3 = true
    end
else
    game.Players.LocalPlayer:Kick("Unsupported Game")
end
repeat
-- 1) Load thư viện WazureV1 từ GitHub
local WazureV1 = loadstring(
    game:HttpGet("https://raw.githubusercontent.com/0xteru/uilibrary/refs/heads/main/Wazure%20V1%20Lib/Source.lua")
)()

-- 2) Khởi tạo GUI
local WazureGui = WazureV1:Start({
    Name = "W-azure",
    ["Logo Player"] = "rbxassetid://18243105495",
    ["Name Player"] = "@SongDaiThanhHuyenTh",
    ["Tab Width"] = 120,
    Color = Color3.fromRGB(6, 141, 234),
    ["Custom Toggle"] = false,
    ["Save Config"] = {
        Folder = "W-azure",
        ["Name Config"] = "Config",
    },
    ["CloseCallBack"] = function()
        WazureV1:Notify({
            Title = "DogTanny",
            Content = "Closed UI!",
            Logo = "rbxassetid://18289959127",
            Time = 1,
            Delay = 5,
        })
    end
})

-- 3) Tạo các Tab
local OneClick = WazureGui:MakeTab("OneClick")

    t:MakeToggle("OneClick ( All In One )", {
        Title = "Auto Farm Lv + Buy GHM + CDK + SKUll GUITAL",
        Content = "Start ?",
        Default = false,
        Callback = function(isOn)
